{"version":3,"sources":["components/habit.jsx","components/habitAddForm.jsx","components/habits.jsx","components/navbar.jsx","app.jsx","components/simpleHabit.jsx","index.js"],"names":["Habit","handleIncrement","props","onIncrement","habit","handleDecrement","onDecrement","handleDelete","onDelete","console","log","this","name","count","className","onClick","PureComponent","HabitAddForm","memo","formRef","React","createRef","inputRef","ref","onSubmit","event","preventDefault","current","value","onAdd","reset","type","placeholder","Habits","handlAdd","habits","map","id","onReset","Component","Navbar","totalCount","SimpleHabit","useState","setCount","spanRef","useRef","useCallback","useEffect","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qPAgDeA,G,kNAjCXC,gBAAmB,WAChB,EAAKC,MAAMC,YAAY,EAAKD,MAAME,Q,EAKrCC,gBAAmB,WACf,EAAKH,MAAMI,YAAY,EAAKJ,MAAME,Q,EAEtCG,aAAe,WACX,EAAKL,MAAMM,SAAS,EAAKN,MAAME,Q,kEAnB/BK,QAAQC,IAAR,kBAAuBC,KAAKT,MAAME,MAAMQ,KAAxC,e,6CAKAH,QAAQC,IAAR,kBAAuBC,KAAKT,MAAME,MAAMQ,KAAxC,kB,+BAgBM,IAAD,EACiBD,KAAKT,MAAME,MAA1BQ,EADF,EACEA,KAAMC,EADR,EACQA,MACb,OACI,qBAAIC,UAAU,QAAd,UACA,sBAAMA,UAAU,aAAhB,SAA8BF,IAC9B,sBAAME,UAAU,cAAhB,SAA+BD,IAE/B,wBAAQC,UAAU,8BAA8BC,QAASJ,KAAKV,gBAA9D,SACI,mBAAGa,UAAU,yBAEjB,wBAAQA,UAAU,8BAA8BC,QAASJ,KAAKN,gBAA9D,SACI,mBAAGS,UAAU,0BAEjB,wBAAQA,UAAU,4BAA4BC,QAASJ,KAAKJ,aAA5D,SACI,mBAAGO,UAAU,0B,GAvCTE,kBCgCLC,EA9BMC,gBAAK,SAAAhB,GAEtB,IAAOiB,EAAUC,IAAMC,YAChBC,EAAWF,IAAMC,YAYtB,OACI,8BACG,uBAAME,IAAKJ,EAASL,UAAU,YAAYU,SAZlC,SAAAC,GACVA,EAAMC,iBACN,IAAMd,EAAOU,EAASK,QAAQC,MAC9BhB,GAAQV,EAAM2B,MAAMjB,GAIpBO,EAAQQ,QAAQG,SAKd,UACI,uBAEAP,IAAKD,EACLS,KAAK,OACLjB,UAAU,YACVkB,YAAY,4BACZ,wBAAQlB,UAAU,UAAlB,yBCmBFmB,E,4MAxCXhC,gBAAmB,SAAAG,GACf,EAAKF,MAAMC,YAAYC,I,EAG3BC,gBAAmB,SAAAD,GACf,EAAKF,MAAMI,YAAYF,I,EAG3BG,aAAe,SAAAH,GACX,EAAKF,MAAMM,SAASJ,I,EAGvB8B,SAAW,SAAAtB,GACP,EAAKV,MAAM2B,MAAMjB,I,uDAEZ,IAAD,OACL,OACI,gCACC,cAAC,EAAD,CAAeiB,MAAOlB,KAAKuB,WAC1B,6BACGvB,KAAKT,MAAMiC,OAAOC,KAAI,SAAAhC,GAAK,OAGxB,aAFA,CAEC,EAAD,CAEAA,MAAOA,EAEPD,YAAa,EAAKF,gBAClBK,YAAa,EAAKD,gBAClBG,SAAU,EAAKD,cALVH,EAAMiC,SASnB,wBAAQvB,UAAU,cAAcC,QAASJ,KAAKT,MAAMoC,QAApD,8B,GAnCSC,aCYNC,E,uKAbP,OACI,gCACI,mBAAG1B,UAAU,4BACb,gDACA,sBAAMA,UAAU,eAAhB,SAEKH,KAAKT,MAAMuC,oB,GARXF,a,GCGHA,Y,aC0BHG,EA7BK,SAAAxC,GAAU,IAAD,EAECyC,mBAAS,GAFV,mBAElB9B,EAFkB,KAEX+B,EAFW,KAGnBC,EAAUC,mBACV7C,EAAkB8C,uBAAY,WACpCH,EAAU/B,EAAS,MAWnB,OAHAmC,qBAAU,WACNvC,QAAQC,IAAR,+BAAoCG,MACrC,CAACA,IAEA,qBAAIC,UAAU,QAAd,UACE,sBAAMS,IAAKsB,EAAS/B,UAAU,aAA9B,qBACA,sBAAMA,UAAU,cAAhB,SAA+BD,IAC/B,wBACEC,UAAU,8BACVC,QAASd,EAFX,SAGE,mBAAGa,UAAU,6BCnBzBmC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAGFC,SAASC,eAAe,W","file":"static/js/main.19ea4f21.chunk.js","sourcesContent":["import React, { PureComponent } from 'react';\r\n\r\nclass Habit extends PureComponent {\r\n    \r\n    // 컴포넌트가 시작되기 이전에 호출함\r\n    componentDidMount(){\r\n        console.log(`habit : ${this.props.habit.name} mounted`);\r\n    }\r\n\r\n    // 컴포넌트를 지우기 전에 호출함\r\n    componentWillUnmount(){\r\n        console.log(`habit : ${this.props.habit.name} will mount`);\r\n    }\r\n\r\n    \r\n    handleIncrement =  () =>{\r\n       this.props.onIncrement(this.props.habit);\r\n    //   2. props를 이용해서 On함수의 인자값으로 props.habit을 전달해준다.\r\n    //      왜 그런지 헷갈린다면 habits에서 모든 세팅을 해주니 얘는 그냥 prop로\r\n    //      값만 전달받으면 된다\r\n    };\r\n    handleDecrement =  () =>{\r\n        this.props.onDecrement(this.props.habit);\r\n    };\r\n    handleDelete = () =>{\r\n        this.props.onDelete(this.props.habit);\r\n    };\r\n    render() {\r\n        const {name, count} = this.props.habit;\r\n        return(\r\n            <li className=\"habit\">\r\n            <span className=\"habit-name\">{name}</span>\r\n            <span className=\"habit-count\">{count}</span>\r\n\r\n            <button className=\"habit-button habit-increase\" onClick={this.handleIncrement}>\r\n                <i className=\"fas fa-plus-square\"></i> \r\n            </button>\r\n            <button className=\"habit-button habit-decrease\" onClick={this.handleDecrement}>\r\n                <i className=\"fas fa-minus-square\"></i> \r\n            </button>\r\n            <button className=\"habit-button habit-delete\" onClick={this.handleDelete}>\r\n                <i className=\"fas fa-trash\"></i> \r\n            </button>\r\n            </li>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Habit;","import React, { memo }   from 'react';\r\n//  함수형 컴포넌트에서 PureComponent 와 비슷한 것은 memo가 있다.\r\n//  state가 따로 없으면 이렇게 함수형 컴포넌트를 만들 수 있다. \r\n//  props의 데이터가 변경되지 않으면 컴포넌트를 업데이트 하지 않아도 될 때 사용하면 됌.\r\nconst HabitAddForm = memo(props => {\r\n\r\n    const  formRef = React.createRef();\r\n    const  inputRef = React.createRef();\r\n     \r\n    const onSubmit = event => {\r\n           event.preventDefault();\r\n           const name = inputRef.current.value;\r\n           name && props.onAdd(name);\r\n           //가라로 쉽게 하는 법\r\n           // this.inputRef.current.value = '';      \r\n           //이게 정석으로 리셋하는 방법\r\n           formRef.current.reset();\r\n       };\r\n  \r\n      return (\r\n          <div>\r\n             <form ref={formRef} className=\"add-forom\" onSubmit={onSubmit}>\r\n                 <input \r\n                 //아래와 같이 ref를 사용할 대상에다 할당해줌\r\n                 ref={inputRef}\r\n                 type=\"text\" \r\n                 className=\"add-input\" \r\n                 placeholder=\"Please enter your habit\"/>\r\n                 <button className=\"add-btn\">Add</button>\r\n             </form>\r\n         </div>\r\n      );\r\n});\r\n\r\nexport default HabitAddForm;\r\n","import React, { Component } from 'react';\r\nimport Habit from './habit';\r\nimport HabitAddForm from './habitAddForm';\r\n\r\n//habit컨테이너 컴포넌트\r\nclass Habits extends Component {\r\n  \r\n    handleIncrement =  habit =>{\r\n        this.props.onIncrement(habit);\r\n    };\r\n\r\n    handleDecrement =  habit =>{\r\n        this.props.onDecrement(habit);\r\n    };\r\n\r\n    handleDelete = habit =>{\r\n        this.props.onDelete(habit);\r\n     };\r\n\r\n     handlAdd = name =>{\r\n         this.props.onAdd(name);\r\n     }\r\n    render() {\r\n        return ( \r\n            <div >\r\n             <HabitAddForm  onAdd={this.handlAdd}/>\r\n              <ul>\r\n                {this.props.habits.map(habit =>(\r\n                    //배열을 이용해서 각각 연결시 켜줌\r\n                    // 고유의 키값이 필요해서 키도 연결\r\n                    <Habit \r\n                    key={habit.id}\r\n                    habit={habit}\r\n                    // 1.  habit의 함수를 this를 사용해서 할당해준다\r\n                    onIncrement={this.handleIncrement}\r\n                    onDecrement={this.handleDecrement}\r\n                    onDelete={this.handleDelete}        \r\n                    />\r\n                ))}\r\n            </ul> \r\n            <button className=\"haibt-reset\" onClick={this.props.onReset}>Reset All</button> \r\n            </div>\r\n          \r\n        );\r\n    }\r\n}\r\n\r\nexport default Habits;","import React, { Component } from 'react';\r\n\r\nclass Navbar extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <i className=\"navbar-logo fas fa-leaf\"></i>\r\n                <span>habitTracker</span>\r\n                <span className=\"navbar-count\">\r\n                    {/* //props로 totalCount를 전달 */}\r\n                    {this.props.totalCount}    \r\n                </span>  \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Navbar;","import React, {Component} from 'react';\nimport './app.css';\nimport Habits from './components/habits';\nimport Navbar from './components/navbar';\n\nclass App extends Component {\n  state={\n    habits:[\n        // 자식요소가 있다면 이렇게 id를 지정해줘야 한다.\n        // id를 이용해서 성능개선을 하기에 필요\n        {id : 1, name : 'Reading', count : 0},\n        {id : 2, name : 'KReading', count : 0},\n        {id : 3, name : 'Testing', count : 0},\n    ], \n};\nhandleIncrement =  habit =>{\n\n  const habits = this.state.habits.map(item =>{\n    if(item.id === habit.id){\n      return {...habit, count : habit.count + 1};\n    }else{\n      return item;\n    }\n  });\n  this.setState({habits : habits});\n\n};\nhandleDecrement =  habit =>{\n  const habits = this.state.habits.map(item =>{\n    if(item.id === habit.id){\n      const count = habit.count - 1;\n      return {...habit, count : count < 0 ?  0 : count};\n    }else{\n      return item;\n    }\n  });\n  this.setState({habits : habits});\n\n};\n\nhandleDelete = habit =>{\n  // 배열의 filter를 이용해서 삭제함.\n  const habits = this.state.habits.filter(item => item.id !== habit.id);\n  this.setState({habits});\n};\nhandleAdd = name =>{\n  // spread operator\n  const habits = [...this.state.habits, {id : Date.now(), name: name, count : 0}]\n  this.setState({habits});\n}\n\nhandleReset = ()=>{\n  const habits = this.state.habits.map(habit =>{\n   if(habit.count !== 0){\n     return {...habit, count : 0};\n   }\n   return habit\n  });\n  this.setState({habits});\n};\n  render() {\n    return (\n    <>\n    {/* navbar의 값을 새롭게 전달해준다. */}\n    <Navbar totalCount={this.state.habits.filter(item => item.count > 0).length} />\n    <Habits  \n    habits ={this.state.habits}\n    onIncrement={this.handleIncrement}\n    onDecrement={this.handleDecrement}\n    onDelete={this.handleDelete}      \n    onAdd={this.handleAdd}\n    onReset={this.handleReset}\n      />\n    </>\n    ); \n   \n  }\n}\n\nexport default App;\n","import React, {  useCallback, useEffect, useRef, useState } from 'react';\r\n\r\nconst SimpleHabit = props => {\r\n\r\n    const [count, setCount] = useState(0);\r\n    const spanRef = useRef()\r\n    const handleIncrement = useCallback(() => {\r\n    setCount( count  + 1 );\r\n  });\r\n\r\n    // 이전에는 componenDidMount & componentWillMount 등을 활용했는데\r\n    // useEfect는 이 둘을 동시에 사용하는 것과 같다.\r\n    // 그러나 이것이 호출될 때마다 새로운 요청을 하게 되는데 이를 방지하기 위해서 특정 데이터가 변경되었을 때만\r\n    // 호출하고 싶다면 저렇게 밑과 같이(  [count]  ) 사용하면 된다.\r\n\r\n    useEffect(() =>{\r\n        console.log(`mounted & updated :  ${count}`);\r\n    }, [count]);\r\n    return (\r\n        <li className=\"habit\">\r\n          <span ref={spanRef} className=\"habit-name\">Reading</span>\r\n          <span className=\"habit-count\">{count}</span>\r\n          <button\r\n            className=\"habit-button habit-increase\"\r\n            onClick={handleIncrement}>\r\n            <i className=\"fas fa-plus-square\"></i>\r\n          </button>\r\n        </li>\r\n      );\r\n};\r\n\r\nexport default SimpleHabit;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app';\nimport '@fortawesome/fontawesome-free/js/all.js';\nimport SimpleHabit from './components/simpleHabit';\nReactDOM.render(\n  <React.StrictMode>\n    <SimpleHabit />\n    {/* <App /> */}\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}